{"meta":{"title":"地字第一号","subtitle":"重庆·嘉陵江·望江阁","description":"","author":"归海一刀","url":"http://example.com","root":"/"},"pages":[{"title":"分类","date":"2020-09-12T07:09:52.000Z","updated":"2020-09-14T07:49:27.797Z","comments":true,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"所有标签","date":"2020-09-14T07:49:01.000Z","updated":"2020-09-14T07:48:20.902Z","comments":true,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Docker容器的使用","slug":"Docker容器的使用","date":"2020-09-14T08:23:54.000Z","updated":"2020-09-14T08:32:36.701Z","comments":true,"path":"2020/09/14/Docker容器的使用/","link":"","permalink":"http://example.com/2020/09/14/Docker%E5%AE%B9%E5%99%A8%E7%9A%84%E4%BD%BF%E7%94%A8/","excerpt":"","text":"Docker容器的使用Docker是一个开源的引擎，可以轻松的为任何应用创建一个轻量级的、可移植的、自给自足的容器。开发者在笔记本上编译测试通过的容器可以批量地在生产环境中部署，包括VMs（虚拟机）、bare metal、OpenStack 集群和其他的基础应用平台。Docker通常用于如下场景： web应用的自动化打包和发布； 自动化测试和持续集成、发布； 在服务型环境中部署和调整数据库或其他的后台应用； 从头编译或者扩展现有的OpenShift或Cloud Foundry平台来搭建自己的PaaS环境。 ubuntu 上安装： wget -qO- https://get.docker.com/ | sh 或者 sudo apt-get install docker Docker系统有两个程序：docker服务端和docker客户端。其中docker服务端是一个服务进程，管理着所有的容器。docker客户端则扮演着docker服务端的远程控制器，可以用来控制docker的服务端进程。大部分情况下，docker服务端和客户端运行在一台机器上。 搜索可用的docker镜像使用docker最简单的方式莫过于从现有的容器镜像开始。Docker官方网站专门有一个页面来存储所有可用的镜像，网址是：index.docker.io。你可以通过浏览这个网页来查找你想要使用的镜像，或者使用命令行的工具来检索。目标：学会使用命令行的工具来检索名字叫做tutorial的镜像。提示：命令行的格式为：docker search 镜像名字 学会使用docker命令来下载镜像下载镜像的命令非常简单，使用docker pull命令即可。(译者按：docker命令和git有一些类似的地方）。在docker的镜像索引网站上面，镜像都是按照 用户名/ 镜像名的方式来存储的。有一组比较特殊的镜像，比如ubuntu这类基础镜像，经过官方的验证，值得信任，可以直接用 镜像名来检索到。目标：通过docker命令下载tutorial镜像。提示：执行pull命令的时候要写完整的名字，比如”learn/tutorial”。 查看安装的镜像： 在docker容器中运行hello world!docker容器可以理解为在沙盒中运行的进程。这个沙盒包含了该进程运行所必须的资源，包括文件系统、系统类库、shell 环境等等。但这个沙盒默认是不会运行任何程序的。你需要在沙盒中运行一个进程来启动某一个容器。这个进程是该容器的唯一进程，所以当该进程结束的时候，容器也会完全的停止。目标：在我们刚刚下载的镜像中输出”hello word”。为了达到这个目的，我们需要在这个容器中运行”echo”命令，输出”hello word”。提示：docker run命令有两个参数，一个是镜像名，一个是要在镜像中运行的命令。 在容器中安装新的程序下一步我们要做的事情是在容器里面安装一个简单的程序(ping)。我们之前下载的tutorial镜像是基于ubuntu的，所以你可以使用ubuntu的apt-get命令来安装ping程序：apt-get install -y ping。备注：apt-get 命令执行完毕之后，容器就会停止，但对容器的改动不会丢失。目标：在learn/tutorial镜像里面安装ping程序。提示：在执行apt-get 命令的时候，要带上-y参数。如果不指定-y参数的话，apt-get命令会进入交互模式，需要用户输入命令来进行确认，但在docker环境中是无法响应这种交互的。 保存对容器的修改当你对某一个容器做了修改之后（通过在容器中运行某一个命令），可以把对容器的修改保存下来，这样下次可以从保存后的最新状态运行该容器。docker中保存状态的过程称之为committing，它保存的新旧状态之间的区别，从而产生一个新的版本。目标：首先使用docker ps -l命令获得安装完ping命令之后容器的id。然后把这个镜像保存为learn/ping。提示：1. 运行docker commit，可以查看该命令的参数列表。2. 你需要指定要提交保存容器的ID。(译者按：通过docker ps -l 命令获得)3. 无需拷贝完整的id，通常来讲最开始的三至四个字母即可区分。（译者按：非常类似git里面的版本号) 运行新的镜像ok，到现在为止，你已经建立了一个完整的、自成体系的docker环境，并且安装了ping命令在里面。它可以在任何支持docker环境的系统中运行啦！(译者按：是不是很神奇呢？)让我们来体验一下吧！目标：在新的镜像中运行ping www.google.com命令。提示：一定要使用新的镜像名learn/ping来运行ping命令。(译者按：最开始下载的learn/tutorial镜像中是没有ping命令的) 查看所有的容器列表的命令是：docker ps -a ，显示最近一个容器的命令是：docker ps -l，更新太快了- - 发布docker镜像现在我们已经验证了新镜像可以正常工作，下一步我们可以将其发布到官方的索引网站。还记得我们最开始下载的learn/tutorial镜像吧，我们也可以把我们自己编译的镜像发布到索引页面，一方面可以自己重用，另一方面也可以分享给其他人使用。runoob@runoob:~# docker run -d -P training/webapp python app.py-d:让容器在后台运行。-P:将容器内部使用的网络端口映射到我们使用的主机上。docker logs [ID或者名字] 可以查看容器内部的标准输出。停止运行runoob@runoob:~$ docker stop wizardly_chandrasekhar 我们可以使用 docker rm 命令来删除不需要的容器 删除容器时，容器必须是停止状态runoob@runoob:~$ docker rm wizardly_chandrasekhar docker run 只在第一次运行时使用，将镜像放到容器中，以后再次启动这个容器时，只需要使用命令docker start 即可。docker run**相当于执行了两步操作：将镜像放入容器中（**docker create**）**,**然后将容器启动，使之变成运行时容器（**docker start**）。**","categories":[{"name":"容器","slug":"容器","permalink":"http://example.com/categories/%E5%AE%B9%E5%99%A8/"}],"tags":[{"name":"docker","slug":"docker","permalink":"http://example.com/tags/docker/"}]},{"title":"MySQL创建用户与授权","slug":"MySQL创建用户与授权","date":"2020-09-14T08:18:16.000Z","updated":"2020-09-14T08:19:12.809Z","comments":true,"path":"2020/09/14/MySQL创建用户与授权/","link":"","permalink":"http://example.com/2020/09/14/MySQL%E5%88%9B%E5%BB%BA%E7%94%A8%E6%88%B7%E4%B8%8E%E6%8E%88%E6%9D%83/","excerpt":"","text":"MySQL创建用户与授权一. 创建用户命令:CREATE USER ‘username’@’host’ IDENTIFIED BY ‘password’; 说明： username：你将创建的用户名 host：指定该用户在哪个主机上可以登陆，如果是本地用户可用localhost，如果想让该用户可以从任意远程主机登陆，可以使用通配符% password：该用户的登陆密码，密码可以为空，如果为空则该用户可以不需要密码登陆服务器 例子：CREATE USER ‘dog’@’localhost’ IDENTIFIED BY ‘123456’; CREATE USER ‘pig’@’192.168.1.101_’ IDENDIFIED BY ‘123456’; CREATE USER ‘pig’@’%’ IDENTIFIED BY ‘123456’; CREATE USER ‘pig’@’%’ IDENTIFIED BY ‘’; CREATE USER ‘pig’@’%’; 二. 授权:命令:GRANT privileges ON databasename.tablename TO ‘username’@’host’ 说明: privileges：用户的操作权限，如SELECT，INSERT，UPDATE等，如果要授予所的权限则使用ALL databasename：数据库名 tablename：表名，如果要授予该用户对所有数据库和表的相应操作权限则可用表示，如.* 例子: GRANT SELECT, INSERT ON test.user TO ‘pig’@’%’; GRANT ALL ON . TO ‘pig’@’%’; GRANT ALL ON maindataplus.* TO ‘pig’@’%’; 注意:用以上命令授权的用户不能给其它用户授权，如果想让该用户可以授权，用以下命令: GRANT privileges ON databasename.tablename TO ‘username’@’host’ WITH GRANT OPTION; 三.设置与更改用户密码命令:SET PASSWORD FOR ‘username’@’host’ = PASSWORD(‘newpassword’); 如果是当前登陆用户用: SET PASSWORD = PASSWORD(“newpassword”); 例子:SET PASSWORD FOR ‘pig’@’%’ = PASSWORD(“123456“); 四. 撤销用户权限命令:REVOKE privilege ON databasename.tablename FROM ‘username’@’host’; 说明:privilege, databasename, tablename：同授权部分 例子:REVOKE SELECT ON . FROM ‘pig’@’%’; 注意:假如你在给用户‘pig’@’%’授权的时候是这样的（或类似的）：GRANT SELECT ON test.user TO ‘pig’@’%’，则在使用REVOKE SELECT ON . FROM ‘pig’@’%’;命令并不能撤销该用户对test数据库中user表的SELECT 操作。相反，如果授权使用的是GRANT SELECT ON . TO ‘pig’@’%’;则REVOKE SELECT ON test.user FROM ‘pig’@’%’;命令也不能撤销该用户对test数据库中user表的Select权限。 具体信息可以用命令SHOW GRANTS FOR ‘pig’@’%’; 查看。 五.删除用户命令:DROP USER ‘username’@’host’;","categories":[{"name":"数据库","slug":"数据库","permalink":"http://example.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"}],"tags":[{"name":"mysql","slug":"mysql","permalink":"http://example.com/tags/mysql/"}]},{"title":"YML简介","slug":"YML简介","date":"2020-09-12T06:03:43.000Z","updated":"2020-09-14T08:11:01.762Z","comments":true,"path":"2020/09/12/YML简介/","link":"","permalink":"http://example.com/2020/09/12/YML%E7%AE%80%E4%BB%8B/","excerpt":"","text":"一、YML是什么YAML (YAML Ain’t a Markup Language)YAML不是一种标记语言，通常以.yml为后缀的文件，是一种直观的能够被电脑识别的数据序列化格式，并且容易被人类阅读，容易和脚本语言交互的，可以被支持YAML库的不同的编程语言程序导入，一种专门用来写配置文件的语言。可用于如： Java，C/C++, Ruby, Python, Perl, C#, PHP等。 二、YML的优点 YAML易于人们阅读。 YAML数据在编程语言之间是可移植的。 YAML匹配敏捷语言的本机数据结构。 YAML具有一致的模型来支持通用工具。 YAML支持单程处理。 YAML具有表现力和可扩展性。 YAML易于实现和使用。 三、YML语法1.约定 k: v 表示键值对关系，冒号后面必须有一个空格 使用空格的缩进表示层级关系，空格数目不重要，只要是左对齐的一列数据，都是同一个层级的 大小写敏感 缩进时不允许使用Tab键，只允许使用空格。 松散表示，java中对于驼峰命名法，可用原名或使用-代替驼峰，如java中的lastName属性,在yml中使用lastName或 last-name都可正确映射。 2.键值关系(以java语言为例，其它语言类似)对于键与值主要是看能否表示以下内容。普通的值(数字、字符串、布尔)、日期、对象、数组、集合等。 1) 普通值(字面量)k: v：字面量直接写； 字符串默认不用加上单引号或者双绰号； “”: 双引号；不会转义字符串里面的特殊字符；特殊字符会作为本身想表示的意思 ​ name: “zhangsan \\n lisi”：输出；zhangsan 换行 lisi ‘’：单引号；会转义特殊字符，特殊字符最终只是一个普通的字符串数据 12345name1: zhangsanname2: &#x27;zhangsan \\n lisi&#x27;name3: &quot;zhangsan \\n lisi&quot;age: 18flag: true 2)日期1date: 2020/09/12 3)对象(属性和值)、Map(键值对) 在下一行来写对象的属性和值的关系，注意缩进 123people: name: zhangsan age: 20 行内写法: 1people: &#123;name:zhangsan,age: 20&#125; 4)数组、list、set用- 值表示数组中的一个元素 1234pets: - dog - pig - cat 行内写法 1pets: [dog,pig,cat] 5)数组对象、list对象、set对象123456peoples: - name: zhangsan age: 22 - name: lisi age: 20 - &#123;name: wangwu,age: 18&#125; 6)java代码示例java代码(省略get,set方法) 12345678910111213141516public class Person &#123; private String lastName; private Integer age; private Boolean boss; private Date birth; private Map&lt;String,Object&gt; maps; private List&lt;Dog&gt; lists; private Dog dog; private String[] arr;｝public class Dog &#123; private String name; private Integer age;&#125; 对应的yml 123456789101112131415161718person: boss: false maps: k1: v1 k2: 14 lists: - name: d1 age: 2 - name: d2 age: 3 - &#123;name: d3,age: 4&#125; birth: 2020/09/12 dog: name: p_dog age: 15 age: 13 last-name: 张三 arr: [s1,s2,s3] 3.文档块对于测试环境，预生产环境，生产环境可以使用不同的配置，如果只想写到一个文件中，yml与是支持的,每个块用—-隔开 12345678910111213141516171819server: port: 8081spring: profiles: active: prod #激活对应的文档块---server: port: 8083spring: profiles: dev #指定属于哪个环境---server: port: 8084spring: profiles: prod #指定属于哪个环境","categories":[{"name":"脚本","slug":"脚本","permalink":"http://example.com/categories/%E8%84%9A%E6%9C%AC/"}],"tags":[{"name":"YML","slug":"YML","permalink":"http://example.com/tags/YML/"}]},{"title":"hexo+github.io博客搭建📖","slug":"hexo-github-io博客搭建","date":"2020-09-11T09:17:59.000Z","updated":"2020-09-14T08:11:28.939Z","comments":true,"path":"2020/09/11/hexo-github-io博客搭建/","link":"","permalink":"http://example.com/2020/09/11/hexo-github-io%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/","excerpt":"","text":"什么是 Hexo？ Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 需要安装的软件环境 Node.js [nodeJS官网] https://nodejs.org/en/ 安装 hexo： npm install hero-cli -g 使用hexo创建博客目录并启动： hexo init myBlog cd myBlog yarn hexo s 更换hexo主题：git形式： cd 到博客主目录下 git clone https://github.com/theme-next/hexo-theme-next themes/next 修改根目录下的配置文件 [_config.yml] 中 theme: next 然后启动 hexo clean hero s 部署截图 配置网站 参数 描述 title 网站标题 subtitle 网站副标题 description 网站描述 keywords 网站的关键词。支援多个关键词。 author 您的名字 language 网站使用的语言。对于简体中文用户来说，使用不同的主题可能需要设置成不同的值，请参考你的主题的文档自行设置，常见的有 zh-Hans和 zh-CN。 timezone 网站时区。Hexo 默认使用您电脑的时区。请参考 时区列表 进行设置，如 America/New_York, Japan, 和 UTC 。一般的，对于中国大陆地区可以使用 Asia/Shanghai。 网址 参数 描述 默认值 url 网址 root 网站根目录 permalink 文章的 永久链接 格式 :year/:month/:day/:title/ permalink_defaults 永久链接中各部分的默认值 pretty_urls 改写 permalink 的值来美化 URL pretty_urls.trailing_index 是否在永久链接中保留尾部的 index.html，设置为 false 时去除 true pretty_urls.trailing_html 是否在永久链接中保留尾部的 .html, 设置为 false 时去除 (对尾部的 index.html无效) 目录 参数 描述 默认值 source_dir 资源文件夹，这个文件夹用来存放内容。 source public_dir 公共文件夹，这个文件夹用于存放生成的站点文件。 public tag_dir 标签文件夹 tags archive_dir 归档文件夹 archives category_dir 分类文件夹 categories code_dir Include code 文件夹，source_dir 下的子目录 downloads/code i18n_dir 国际化（i18n）文件夹 :lang 文章 参数 描述 默认值 new_post_name 新文章的文件名称 :title.md default_layout 预设布局 post auto_spacing 在中文和英文之间加入空格 false titlecase 把标题转换为 title case false external_link 在新标签中打开链接 true external_link.enable 在新标签中打开链接 true external_link.field 对整个网站（site）生效或仅对文章（post）生效 site external_link.exclude 需要排除的域名。主域名和子域名如 www 需分别配置 [] filename_case 把文件名称转换为 (1) 小写或 (2) 大写 0 render_drafts 显示草稿 false post_asset_folder 启动 Asset 文件夹 false relative_link 把链接改为与根目录的相对位址 false future 显示未来的文章 true highlight 代码块的设置, see Highlight.js section for usage guide 发布文章文章资源文件夹 对于那些想要更有规律地提供图片和其他资源以及想要将他们的资源分布在各个文章上的人来说，Hexo也提供了更组织化的方式来管理资源。这个稍微有些复杂但是管理资源非常方便的功能可以通过将 config.yml 文件中的 post_asset_folder 选项设为 true 来打开。 1post_asset_folder: true 当资源文件管理功能打开后，Hexo将会在你每一次通过 hexo new [layout] &lt;title&gt; 命令创建新文章时自动创建一个文件夹。这个资源文件夹将会有与这个文章文件一样的名字。将所有与你的文章有关的资源放在这个关联文件夹中之后，你可以通过相对路径来引用它们，这样你就得到了一个更简单而且方便得多的工作流。 相关文档[hexo中文文档：] https://hexo.io/zh-cn/docs/","categories":[{"name":"环境搭建","slug":"环境搭建","permalink":"http://example.com/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://example.com/tags/hexo/"}]},{"title":"Hello World","slug":"hello-world","date":"2020-09-11T03:40:32.735Z","updated":"2020-09-11T03:40:32.736Z","comments":true,"path":"2020/09/11/hello-world/","link":"","permalink":"http://example.com/2020/09/11/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[{"name":"容器","slug":"容器","permalink":"http://example.com/categories/%E5%AE%B9%E5%99%A8/"},{"name":"数据库","slug":"数据库","permalink":"http://example.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"脚本","slug":"脚本","permalink":"http://example.com/categories/%E8%84%9A%E6%9C%AC/"},{"name":"环境搭建","slug":"环境搭建","permalink":"http://example.com/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"}],"tags":[{"name":"docker","slug":"docker","permalink":"http://example.com/tags/docker/"},{"name":"mysql","slug":"mysql","permalink":"http://example.com/tags/mysql/"},{"name":"YML","slug":"YML","permalink":"http://example.com/tags/YML/"},{"name":"hexo","slug":"hexo","permalink":"http://example.com/tags/hexo/"}]}